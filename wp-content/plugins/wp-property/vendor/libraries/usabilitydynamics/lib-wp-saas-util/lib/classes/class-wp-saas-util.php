<?php
/**
 * UD API Registration
 *
 */
namespace UsabilityDynamics\SAAS_UTIL {

  if( !class_exists( 'UsabilityDynamics\SAAS_UTIL\Register' ) ) {

    class Register {

      /**
       * Registration state, prevents loops.
       * 
       * @_state
       */
      private $_state;

      /**
       * Site ID.
       *
       * @var null
       */
      public $site_id = null;

      /**
       * Public Key.
       *
       * @var null
       */
      public $public_key = null;

      /**
       * Secret token, generated by this site.
       *
       * @var null
       */
      public $secret_token = null;

      /**
       * Registration API Url.
       *
       * Can be overwritten using UD_API_REGISTER_URL constant.
       * 
       * @var null
       */
      public $_api_url = null;

      /**
       * Register constructor.
       *
       * Makes sure registration is not being called too late.
       *
       * @param $product_slug
       */
      public function __construct( $product_slug ) {

        if ( did_action( 'init' ) ) {
          return _doing_it_wrong( __FUNCTION__, __( 'Calling [UsabilityDynamics\SAAS_UTIL\Register] too late, shold be called before [init] action.' ), '1.0.2' );
        }

        // Run site registration now.
        $this->maybe_register( $product_slug );

        return true;

      }

      /**
       * Register site if needed
       *
       * Options Used:
       *
       * - ud_site_secret_token - Generated by site and only known by site and UD API.
       * - ud_site_id - Provided to site by UD API, secret.
       * - ud_site_public_key - Provided to site by UD API, not secret, used for front-end API requests.
       * 
       * @param $product_slug
       */
      private function maybe_register( $product_slug ) {
        global $wpdb;

        if ( ( defined( 'DOING_AJAX' ) && DOING_AJAX ) || ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST ) || ( defined( 'WP_CLI' ) && WP_CLI ) ) {
          return;
        }

        // Tokens set, do not attempt registration unless it cleared.
        if( get_site_option( 'ud_site_secret_token' ) && get_site_option( 'ud_site_id' ) && get_site_option( 'ud_site_public_key' ) ) {
          return;
        }

        $this->_state = get_transient('ud_registration_state');

        // Registration is currently disabled.
        if( $this->_state && is_array( $this->_state ) && $this->_state[ 'registration-backoff' ] ) {
          return;
        }

        // Set registration back-off to avoid this being ran multiple times.
        set_transient('ud_registration_state', array( 'registration-backoff' => true, 'time' => time() ), 3600 );

        // Create site secret token, record in DB.
        update_site_option( 'ud_site_secret_token', $this->secret_token = md5( wp_generate_password( 20 ) ) );

        // Get site ID and public_key just in case.
        $this->site_id = get_site_option( 'ud_site_id' );
        $this->public_key = get_site_option( 'ud_site_public_key' );


        if( defined( 'UD_API_REGISTER_URL' ) && UD_API_REGISTER_URL ) {
          $this->_api_url = untrailingslashit( UD_API_REGISTER_URL ) . '/' . $product_slug . '/register/v1';
        } else {
          $this->_api_url = 'https://api.usabilitydynamics.com/product/' . $product_slug . '/register/v1';
        }

        $args = array(
            'method' => 'POST',
            'timeout' => 10,
            'redirection' => 5,
            'httpversion' => '1.0',
            //'headers' => array(),
            'body' => array(
              'timestamp' => time(),
              'host' => str_replace( array( 'http://', 'https://' ), '', is_multisite() ? network_site_url() : get_site_url() ),
              'ud_site_secret_token' => $this->secret_token,
              'ud_site_public_key' => $this->public_key,
              'ud_site_id' => $this->site_id,
              'db_hash' => md5( defined( 'DB_NAME' ) ? DB_NAME : null ) . '-' . md5( isset( $wpdb->prefix ) ? $wpdb->prefix : null),
              'deployment_hash' => md5( is_multisite() ? network_site_url() : get_site_url() ) . '-' . md5( defined( 'DB_NAME' ) ? DB_NAME : null ) . '-' . md5( isset( $wpdb->prefix ) ? $wpdb->prefix : null),
              'home_url' => is_multisite() ? network_site_url() : get_site_url(),
              'xmlrpc_url' => site_url( '/xmlrpc.php' ),
              'rest_url' => site_url( function_exists( 'rest_get_url_prefix' ) ? rest_get_url_prefix() : null ),
              'user_id' => get_current_user_id(),
              'message' => "Doing site registration, please give me [ud_site_id] and [ud_site_public_key].",
            )
        );

        $response = wp_remote_post( $this->_api_url, $args );

        if( wp_remote_retrieve_response_code( $response ) === 200 && !is_wp_error( $response ) ) {

          $api_body = json_decode( wp_remote_retrieve_body( $response ) );

          if( isset( $api_body ) && $api_body->ud_site_secret_token === $this->secret_token ) {

            if( isset( $api_body->ud_site_id ) ) {
              update_site_option( 'ud_site_id', $api_body->ud_site_id );
            }

            if( isset( $api_body->ud_site_public_key ) ) {
              update_site_option( 'ud_site_public_key', $api_body->ud_site_public_key );
            }

          }

        }

        // Update transient with response detail.
        set_transient('ud_registration_state', array(
          'registration-backoff' => true,
          'time' => time(),
          'request' => array(
            'url' => $this->_api_url,
            'body' => $args['body']
          ) ,
          'response' =>isset( $api_body ) ? $api_body : null,
          'responseStatus' => wp_remote_retrieve_response_code( $response )
        ), 3600 );

      }

    }

  }

}